# -*- coding: utf-8 -*-
"""Stage 1 17-18比总.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qvcU1y6BBsMIewziwW_HFJv_W3DPNIv2

# Stage 1

## set up
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import json
import matplotlib.pyplot as plt
from tabulate import tabulate
import seaborn as sns
from collections import Counter
import plotly.graph_objects as go
import plotly.express as px

!pip install calmap
import calmap

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

## read from google drive
from google.colab import drive
drive.mount('/content/drive')

# Primary Colors
colour_primary_black = '#000000'
colour_primary_purple = '#800080'

# Gradient Shades
colour_gradient_dark_purple = '#400040'
colour_gradient_medium_purple = '#600060'
colour_gradient_light_purple = '#A000A0'

# Accent Colors
colour_accent_lavender = '#E6E6FA'
colour_accent_deep_purple = '#4B0082'
colour_accent_soft_black = '#333333'

# Complementary Colors
colour_complementary_mint_green = '#98FF98'
colour_complementary_soft_pink = '#FFB6C1'

# Text
colour_off_white = '#b4abb8'

plt.rcParams['axes.titlecolor'] = colour_off_white
plt.rcParams['axes.labelcolor'] = colour_off_white
plt.rcParams['xtick.color'] = colour_off_white
plt.rcParams['ytick.color'] =colour_off_white
plt.rcParams['ytick.color'] = colour_off_white
plt.rcParams['ytick.color'] = colour_off_white
plt.rcParams['text.color'] = colour_off_white
plt.rcParams['legend.edgecolor'] = colour_primary_black



#background colour
plt.rcParams['axes.facecolor'] =colour_primary_black
plt.rcParams['figure.facecolor'] = colour_primary_black



#colour palette for heat maps
color_palette = sns.color_palette(palette = f'blend:{colour_primary_black},{colour_gradient_medium_purple}',as_cmap=True)

"""## CANADA"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/CA_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/CAvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## Germany"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/DE_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/DEvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## France"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/FR_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/FRvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## Great Britain"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/GB_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/GBvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## India"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/IN_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/INvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## Japan"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/JP_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/JPvideos.csv', encoding="ISO-8859-1")

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## South Korea"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/KR_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/KRvideos.csv', encoding="ISO-8859-1")

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## Mexico"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/MX_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/MXvideos.csv', encoding="ISO-8859-1")

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## Russia"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/RU_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/RUvideos.csv', encoding="ISO-8859-1")

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()

"""## USA"""

# manually open and read the JSON file
with open('/content/drive/MyDrive/CMPT732_project/1718/US_category_id.json', 'r') as json_file:
    category_id = json.load(json_file)

##manually read in the csv file
videos = pd.read_csv('/content/drive/MyDrive/CMPT732_project/1718/USvideos.csv')

###using category titles from json

json_df = pd.DataFrame(category_id['items'])
# Convert 'id' column to int64
json_df['id'] = json_df['id'].astype('int64')


# Extract 'title' from 'snippet' and assign it a name
json_df['category_title'] = json_df['snippet'].apply(lambda x: x['title'])

# Merge the DataFrames with the 'title' column
videos = videos.merge(json_df[['id', 'category_title']], left_on='category_id', right_on='id')

# Drop the 'id' column from the merged DataFrame
videos = videos.drop(columns=['id'])

##creating table to create bargraphs from

# Count occurrences of each unique value
value_counts = videos['category_title'].value_counts()

#summing the total views
category_views = videos.groupby(['category_title'],as_index=False)['views'].sum()

## summing up total comment_count
category_comment_count = videos.groupby(['category_title'],as_index=False)['comment_count'].sum()

##summing the total likes
category_likes = videos.groupby(['category_title'],as_index=False)['likes'].sum()
##summing the total likes
category_dislikes = videos.groupby(['category_title'],as_index=False)['dislikes'].sum()

# Sort the results
sorted_counts = value_counts.sort_values(ascending=False)
bargraph_data = pd.DataFrame({'category_title': sorted_counts.index, 'count': sorted_counts.values})
merged_df = bargraph_data.merge(category_views, on='category_title', how='left').merge(category_likes,on='category_title', how='left').merge(category_dislikes, on='category_title', how='left').merge(category_comment_count, on='category_title', how='left')

merged_df['%_of_total_views'] = ((merged_df['views']/merged_df['views'].sum()) * 100).round(2)
merged_df['%_of_total_likes'] = ((merged_df['likes']/merged_df['likes'].sum()) * 100).round(2)
merged_df['%_of_total_dislikes'] = ((merged_df['dislikes']/merged_df['dislikes'].sum()) * 100).round(2)
merged_df['%_of_total_comments'] = ((merged_df['comment_count']/merged_df['comment_count'].sum()) * 100).round(2)

column_sum = merged_df['count'].sum()
merged_df['%_of_videos'] = ((merged_df['count']/column_sum) * 100).round(2)


merged_df

#Number of vids versus views

colour_bars = colour_primary_purple#'cornflowerblue' #'#9e9e9e' #'#8ab6d6'
colour_comments = colour_complementary_mint_green#'#6a5acd' # '#34a853'
colour_likes= colour_complementary_soft_pink#'#ff7f50' # '#fbbc05'
colour_views =colour_accent_lavender #'#20b2aa' # '#ea4335'
# Create the first set of bars (count)
fig, ax1 = plt.subplots(figsize=(12, 8))



# Plot the count data on the primary y-axis (left)
ax1.bar(merged_df['category_title'], merged_df['count'], color=colour_bars, alpha=0.6, label='Count')
ax1.set_xlabel('Category Title')
ax1.set_ylabel('Number of videos')
# Set the rotation for the x-axis labels before creating any bar plots
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better visibility
# Create a second y-axis sharing the same x-axis
ax2 = ax1.twinx()


# Plot the % of total comment count data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_comments'], color=colour_comments, marker='o', label='% of Total Comments')

# Plot the likes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_likes'], color=colour_likes, marker='o', label='% of Total Likes')

# Plot the views data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_views'], color=colour_views, marker='o', label='% of Total Views')

# Plot the dislikes data on the secondary y-axis (right)
ax2.plot(merged_df['category_title'], merged_df['%_of_total_dislikes'], color='yellow', marker='o', label='% of Total Disikes')

ax2.set_ylabel('% of Total')

# Since we've added more datasets to ax2, it's best to collect all the legend handles and labels, and then display them together.
handles1, labels1 = ax1.get_legend_handles_labels()
handles2, labels2 = ax2.get_legend_handles_labels()

# Add legend for all datasets
ax1.legend(handles1, labels1, loc='upper left')
ax2.legend(handles2, labels2, loc='upper right')

# Set a title for the graph
ax1.set_title('Count versus total comment count, likes and views for each category')

# Show the plot
plt.show()

videos['month_year'] = videos['trending_date'].apply(lambda x: f"{x[0:2]}-{x[6:]}")
month_year = videos.groupby(['month_year'],as_index=False)['category_title'].value_counts().reset_index().sort_index()
month_year = month_year.rename(columns={'category_title':'Category Title'})


# Pivot data to get category counts per month
pivot_df = month_year.pivot(index='month_year', columns='Category Title', values='count').fillna(0)

# Calculate percentage contribution of each category per month
pivot_df_percentage = pivot_df.divide(pivot_df.sum(axis=1), axis=0) * 100

# Melt the dataframe to long format for plotting with Plotly
df_melted = pivot_df_percentage.reset_index().melt(id_vars='month_year', value_name='percentage')


# Create an interactive filled line graph
fig = px.area(df_melted, x='month_year', y='percentage', color='Category Title',
              title='Percentage Contribution of Each Category Type per Month',
              labels={'month_year': 'Month of Year', 'percentage': 'Percentage Contribution'},
              hover_data=['Category Title', 'percentage'],
              line_shape='linear')

fig.update_layout(
    width=900, height=600, margin=dict(l=40, r=40, b=40, t=40),
    title_font_color = colour_off_white,
    xaxis_title_font_color = colour_off_white,
    yaxis=dict(showgrid=False),
    xaxis=dict(linecolor=colour_primary_black,showgrid=False),
    yaxis_title_font_color = colour_off_white,
    font_color= colour_off_white,
    plot_bgcolor=colour_primary_black,
    paper_bgcolor = colour_primary_black,
)

# Show the plot
fig.show()